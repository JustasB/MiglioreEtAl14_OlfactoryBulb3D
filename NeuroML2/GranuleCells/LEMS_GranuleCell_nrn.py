'''
Neuron simulator export for:

Components:
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    Granule_0_3 (Type: cell)
    null (Type: notes)
    pas (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    nax__sh15 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kamt (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kdrmt (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    input_1 (Type: pulseGenerator:  delay=0.04 (SI time) duration=0.1 (SI time) amplitude=5.000000000000001E-11 (SI current))
    input_2 (Type: pulseGenerator:  delay=0.04 (SI time) duration=0.1 (SI time) amplitude=7.5E-11 (SI current))
    input_3 (Type: pulseGenerator:  delay=0.04 (SI time) duration=0.1 (SI time) amplitude=1.0000000000000002E-10 (SI current))
    network (Type: networkWithTemperature:  temperature=308.15 (SI temperature))
    GranuleSim (Type: Simulation:  length=0.18 (SI time) step=1.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.2
         org.neuroml.model   v1.4.2
         jLEMS               v0.9.7.3

'''

import neuron

import time
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

# Adding simulation Component(id=GranuleSim type=Simulation) of network/component: network (Type: networkWithTemperature:  temperature=308.15 (SI temperature))

# Temperature used for network: 308.15 K
h.celsius = 308.15 - 273.15

print("Population GranulePop1 contains 1 instance(s) of component: Granule_0_3 of type: cell")

h.load_file("Granule_0_3.hoc")
a_GranulePop1 = []
h("n_GranulePop1 = 1")
h("objectvar a_GranulePop1[n_GranulePop1]")
for i in range(int(h.n_GranulePop1)):
    h("a_GranulePop1[%i] = new Granule_0_3()"%i)
    h("access a_GranulePop1[%i].soma"%i)

h("a_GranulePop1[0].position(0., 0., 0.)")

h("proc initialiseV_GranulePop1() { for i = 0, n_GranulePop1-1 { a_GranulePop1[i].set_initial_v() } }")
h("objref fih_GranulePop1")
h('{fih_GranulePop1 = new FInitializeHandler(0, "initialiseV_GranulePop1()")}')

h("proc initialiseIons_GranulePop1() { for i = 0, n_GranulePop1-1 { a_GranulePop1[i].set_initial_ion_properties() } }")
h("objref fih_ion_GranulePop1")
h('{fih_ion_GranulePop1 = new FInitializeHandler(1, "initialiseIons_GranulePop1()")}')

print("Population GranulePop2 contains 1 instance(s) of component: Granule_0_3 of type: cell")

h.load_file("Granule_0_3.hoc")
a_GranulePop2 = []
h("n_GranulePop2 = 1")
h("objectvar a_GranulePop2[n_GranulePop2]")
for i in range(int(h.n_GranulePop2)):
    h("a_GranulePop2[%i] = new Granule_0_3()"%i)
    h("access a_GranulePop2[%i].soma"%i)

h("a_GranulePop2[0].position(0., 0., 0.)")

h("proc initialiseV_GranulePop2() { for i = 0, n_GranulePop2-1 { a_GranulePop2[i].set_initial_v() } }")
h("objref fih_GranulePop2")
h('{fih_GranulePop2 = new FInitializeHandler(0, "initialiseV_GranulePop2()")}')

h("proc initialiseIons_GranulePop2() { for i = 0, n_GranulePop2-1 { a_GranulePop2[i].set_initial_ion_properties() } }")
h("objref fih_ion_GranulePop2")
h('{fih_ion_GranulePop2 = new FInitializeHandler(1, "initialiseIons_GranulePop2()")}')

print("Population GranulePop3 contains 1 instance(s) of component: Granule_0_3 of type: cell")

h.load_file("Granule_0_3.hoc")
a_GranulePop3 = []
h("n_GranulePop3 = 1")
h("objectvar a_GranulePop3[n_GranulePop3]")
for i in range(int(h.n_GranulePop3)):
    h("a_GranulePop3[%i] = new Granule_0_3()"%i)
    h("access a_GranulePop3[%i].soma"%i)

h("a_GranulePop3[0].position(0., 0., 0.)")

h("proc initialiseV_GranulePop3() { for i = 0, n_GranulePop3-1 { a_GranulePop3[i].set_initial_v() } }")
h("objref fih_GranulePop3")
h('{fih_GranulePop3 = new FInitializeHandler(0, "initialiseV_GranulePop3()")}')

h("proc initialiseIons_GranulePop3() { for i = 0, n_GranulePop3-1 { a_GranulePop3[i].set_initial_ion_properties() } }")
h("objref fih_ion_GranulePop3")
h('{fih_ion_GranulePop3 = new FInitializeHandler(1, "initialiseIons_GranulePop3()")}')

# Adding input: Component(id=0 type=input)

h("objectvar input_1_0")
h("a_GranulePop1[0].soma { input_1_0 = new input_1(0.500000) } ")

# Adding input: Component(id=0 type=input)

h("objectvar input_2_0")
h("a_GranulePop2[0].soma { input_2_0 = new input_2(0.500000) } ")

# Adding input: Component(id=0 type=input)

h("objectvar input_3_0")
h("a_GranulePop3[0].soma { input_3_0 = new input_3(0.500000) } ")

trec = h.Vector()
trec.record(h._ref_t)

h.tstop = 180

h.dt = 0.01

h.steps_per_ms = 100.0

# Display: display_Granule_1D
display_Granule_1D = h.Graph(0)
display_Granule_1D.size(0,h.tstop,-80.0,50.0)
display_Granule_1D.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
h.graphList[0].append(display_Granule_1D)
# Line, plotting: GranulePop1/0/Granule_0_3/0/v
display_Granule_1D.addexpr("a_GranulePop1[0].soma.v(0.5)", "a_GranulePop1[0].soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
# Line, plotting: GranulePop1/0/Granule_0_3/1/v
display_Granule_1D.addexpr("a_GranulePop1[0].priden.v(0.5)", "a_GranulePop1[0].priden.v(0.5)", 2, 1, 0.8, 0.9, 2)
# Line, plotting: GranulePop1/0/Granule_0_3/2/v
display_Granule_1D.addexpr("a_GranulePop1[0].priden2_0.v(0.5)", "a_GranulePop1[0].priden2_0.v(0.5)", 3, 1, 0.8, 0.9, 2)

# Display: display_Granule_2D
display_Granule_2D = h.Graph(0)
display_Granule_2D.size(0,h.tstop,-80.0,50.0)
display_Granule_2D.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
h.graphList[0].append(display_Granule_2D)
# Line, plotting: GranulePop2/0/Granule_0_3/0/v
display_Granule_2D.addexpr("a_GranulePop2[0].soma.v(0.5)", "a_GranulePop2[0].soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
# Line, plotting: GranulePop2/0/Granule_0_3/1/v
display_Granule_2D.addexpr("a_GranulePop2[0].priden.v(0.5)", "a_GranulePop2[0].priden.v(0.5)", 2, 1, 0.8, 0.9, 2)
# Line, plotting: GranulePop2/0/Granule_0_3/2/v
display_Granule_2D.addexpr("a_GranulePop2[0].priden2_0.v(0.5)", "a_GranulePop2[0].priden2_0.v(0.5)", 3, 1, 0.8, 0.9, 2)

# Display: display_Granule_3D
display_Granule_3D = h.Graph(0)
display_Granule_3D.size(0,h.tstop,-80.0,50.0)
display_Granule_3D.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
h.graphList[0].append(display_Granule_3D)
# Line, plotting: GranulePop3/0/Granule_0_3/0/v
display_Granule_3D.addexpr("a_GranulePop3[0].soma.v(0.5)", "a_GranulePop3[0].soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
# Line, plotting: GranulePop3/0/Granule_0_3/1/v
display_Granule_3D.addexpr("a_GranulePop3[0].priden.v(0.5)", "a_GranulePop3[0].priden.v(0.5)", 2, 1, 0.8, 0.9, 2)
# Line, plotting: GranulePop3/0/Granule_0_3/2/v
display_Granule_3D.addexpr("a_GranulePop3[0].priden2_0.v(0.5)", "a_GranulePop3[0].priden2_0.v(0.5)", 3, 1, 0.8, 0.9, 2)



# File to save: Granule_1F
# Column: GranulePop1/0/Granule_0_3/0/v
h(' objectvar v_soma_v1nA_Granule_1F ')
h(' { v_soma_v1nA_Granule_1F = new Vector() } ')
h(' v_soma_v1nA_Granule_1F.record(&a_GranulePop1[0].soma.v(0.5)) ')
h.v_soma_v1nA_Granule_1F.resize((h.tstop * h.steps_per_ms) + 1)
# Column: GranulePop1/0/Granule_0_3/1/v
h(' objectvar v_initialseg_v1nA_Granule_1F ')
h(' { v_initialseg_v1nA_Granule_1F = new Vector() } ')
h(' v_initialseg_v1nA_Granule_1F.record(&a_GranulePop1[0].priden.v(0.5)) ')
h.v_initialseg_v1nA_Granule_1F.resize((h.tstop * h.steps_per_ms) + 1)
# Column: GranulePop1/0/Granule_0_3/2/v
h(' objectvar v_priden_v1nA_Granule_1F ')
h(' { v_priden_v1nA_Granule_1F = new Vector() } ')
h(' v_priden_v1nA_Granule_1F.record(&a_GranulePop1[0].priden2_0.v(0.5)) ')
h.v_priden_v1nA_Granule_1F.resize((h.tstop * h.steps_per_ms) + 1)

# File to save: Granule_2F
# Column: GranulePop2/0/Granule_0_3/0/v
h(' objectvar v_soma_v2nA_Granule_2F ')
h(' { v_soma_v2nA_Granule_2F = new Vector() } ')
h(' v_soma_v2nA_Granule_2F.record(&a_GranulePop2[0].soma.v(0.5)) ')
h.v_soma_v2nA_Granule_2F.resize((h.tstop * h.steps_per_ms) + 1)
# Column: GranulePop2/0/Granule_0_3/1/v
h(' objectvar v_initialseg_v2nA_Granule_2F ')
h(' { v_initialseg_v2nA_Granule_2F = new Vector() } ')
h(' v_initialseg_v2nA_Granule_2F.record(&a_GranulePop2[0].priden.v(0.5)) ')
h.v_initialseg_v2nA_Granule_2F.resize((h.tstop * h.steps_per_ms) + 1)
# Column: GranulePop2/0/Granule_0_3/2/v
h(' objectvar v_priden_v2nA_Granule_2F ')
h(' { v_priden_v2nA_Granule_2F = new Vector() } ')
h(' v_priden_v2nA_Granule_2F.record(&a_GranulePop2[0].priden2_0.v(0.5)) ')
h.v_priden_v2nA_Granule_2F.resize((h.tstop * h.steps_per_ms) + 1)

# File to save: Granule_3F
# Column: GranulePop3/0/Granule_0_3/0/v
h(' objectvar v_soma_v5nA_Granule_3F ')
h(' { v_soma_v5nA_Granule_3F = new Vector() } ')
h(' v_soma_v5nA_Granule_3F.record(&a_GranulePop3[0].soma.v(0.5)) ')
h.v_soma_v5nA_Granule_3F.resize((h.tstop * h.steps_per_ms) + 1)
# Column: GranulePop3/0/Granule_0_3/1/v
h(' objectvar v_initialseg_v5nA_Granule_3F ')
h(' { v_initialseg_v5nA_Granule_3F = new Vector() } ')
h(' v_initialseg_v5nA_Granule_3F.record(&a_GranulePop3[0].priden.v(0.5)) ')
h.v_initialseg_v5nA_Granule_3F.resize((h.tstop * h.steps_per_ms) + 1)
# Column: GranulePop3/0/Granule_0_3/2/v
h(' objectvar v_priden_v5nA_Granule_3F ')
h(' { v_priden_v5nA_Granule_3F = new Vector() } ')
h(' v_priden_v5nA_Granule_3F.record(&a_GranulePop3[0].priden2_0.v(0.5)) ')
h.v_priden_v5nA_Granule_3F.resize((h.tstop * h.steps_per_ms) + 1)

# File to save: time
# Column: time
h(' objectvar v_time ')
h(' { v_time = new Vector() } ')
h(' v_time.record(&t) ')
h.v_time.resize((h.tstop * h.steps_per_ms) + 1)



h.nrncontrolmenu()
sim_start = time.time()
print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

h.run()

sim_end = time.time()
sim_time = sim_end - sim_start
print("Finished simulation in %f seconds (%f mins), saving results..."%(sim_time, sim_time/60.0))

display_Granule_1D.exec_menu("View = plot")
display_Granule_2D.exec_menu("View = plot")
display_Granule_3D.exec_menu("View = plot")

# File to save: Granule_1F
f_Granule_1F_f2 = open('Granule_1nA.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_Granule_1F_f2.write('%e\t'% (float(h.v_time.get(i))/1000.0)) # Time in first column, save in SI units...
    f_Granule_1F_f2.write('%e\t'%(float(h.v_soma_v1nA_Granule_1F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_1F_f2.write('%e\t'%(float(h.v_initialseg_v1nA_Granule_1F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_1F_f2.write('%e\t'%(float(h.v_priden_v1nA_Granule_1F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_1F_f2.write("\n")
f_Granule_1F_f2.close()
print("Saved data to: Granule_1nA.dat")

# File to save: Granule_2F
f_Granule_2F_f2 = open('Granule_2nA.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_Granule_2F_f2.write('%e\t'% (float(h.v_time.get(i))/1000.0)) # Time in first column, save in SI units...
    f_Granule_2F_f2.write('%e\t'%(float(h.v_soma_v2nA_Granule_2F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_2F_f2.write('%e\t'%(float(h.v_initialseg_v2nA_Granule_2F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_2F_f2.write('%e\t'%(float(h.v_priden_v2nA_Granule_2F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_2F_f2.write("\n")
f_Granule_2F_f2.close()
print("Saved data to: Granule_2nA.dat")

# File to save: Granule_3F
f_Granule_3F_f2 = open('Granule_5nA.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_Granule_3F_f2.write('%e\t'% (float(h.v_time.get(i))/1000.0)) # Time in first column, save in SI units...
    f_Granule_3F_f2.write('%e\t'%(float(h.v_soma_v5nA_Granule_3F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_3F_f2.write('%e\t'%(float(h.v_initialseg_v5nA_Granule_3F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_3F_f2.write('%e\t'%(float(h.v_priden_v5nA_Granule_3F.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_Granule_3F_f2.write("\n")
f_Granule_3F_f2.close()
print("Saved data to: Granule_5nA.dat")

# File to save: time
f_time_f2 = open('time.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_time_f2.write('%f'% (float(h.v_time.get(i))/1000.0))  # Save in SI units...
    f_time_f2.write("\n")
f_time_f2.close()
print("Saved data to: time.dat")

save_end = time.time()
save_time = save_end - sim_end
print("Finished saving results in %f seconds"%(save_time))

print("Done")

