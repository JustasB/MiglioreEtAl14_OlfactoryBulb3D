'''
Neuron simulator export for:

Components:
    null (Type: notes)
    pas (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    nax (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    nax__sh0 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    nax__sh10 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    nax__sh15 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kamt (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kdrmt (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    FIsyn (Type: fastInhibitorySynapse:  LTPlimit=0.03333 (SI time) LTDlimit=0.25 (SI time) sigHalf=50.0 (dimensionless) sigSlope=10.0 (dimensionless) tauRise=0.001 (SI time) tauDecay=0.1 (SI time) peakTime=0.004651687056553628 (SI time) waveformFactor=1.0581977300905705 (dimensionless) gbase=5.0E-9 (SI conductance) erev=-0.08 (SI voltage) ms=0.001 (SI time))
    null (Type: notes)
    AmpaNmdaSynapse (Type: AmpaNmdaSynapse:  LTPlimit=0.03333 (SI time) LTDlimit=0.25 (SI time) sigHalf=50.0 (dimensionless) sigSlope=10.0 (dimensionless) Alpha=350.0 (SI per_time) Beta=35.0 (SI per_time) gMax=1.0E-7 (SI conductance) gAmpafactor=0.001 (dimensionless) Nmdafactor=0.0035 (dimensionless) Ampatau=0.003 (SI time) Cdur=0.001 (SI time) E=0.0 (SI voltage) mg=1.0 (SI concentration) mg_v_scale=62.0 (SI per_voltage) mg_scale=3.57 (SI concentration) ms=0.001 (SI time))
    Glomerulus (Type: cell)
    Mitral_0_0 (Type: cell)
    Granule_0_110821 (Type: cell)
    network_Migliore2014 (Type: networkWithTemperature:  temperature=308.15 (SI temperature))
    synInputFastTwo (Type: expThreeSynapse:  tauRise=1.0E-4 (SI time) tauDecay1=7.0E-4 (SI time) tauDecay2=0.0025 (SI time) peakTime1=2.270228507231199E-4 (SI time) waveformFactor1=1.61360214664657 (dimensionless) peakTime2=3.3529956509043755E-4 (SI time) waveformFactor2=1.1911769125863751 (dimensionless) gbase1=1.5000000000000002E-9 (SI conductance) gbase2=5.0E-10 (SI conductance) erev=0.0 (SI voltage))
    synTrain (Type: timedSynapticInput)
    sim (Type: Simulation:  length=3.0 (SI time) step=2.5E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

'''

import neuron

import time

import hashlib
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=123456789):

        print("\n    Starting simulation in NEURON of %sms generated from NeuroML2 model...\n"%tstop)

        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=sim type=Simulation) of network/component: network_Migliore2014 (Type: networkWithTemperature:  temperature=308.15 (SI temperature))
        
        '''

        # Temperature used for network: 308.15 K
        h.celsius = 308.15 - 273.15

        # ######################   Population: Pop_Gloms
        print("Population Pop_Gloms contains 1 instance(s) of component: Glomerulus of type: cell")

        h.load_file("Glomerulus.hoc")
        a_Pop_Gloms = []
        h("{ n_Pop_Gloms = 1 }")
        h("objectvar a_Pop_Gloms[n_Pop_Gloms]")
        for i in range(int(h.n_Pop_Gloms)):
            h("a_Pop_Gloms[%i] = new Glomerulus()"%i)
            h("access a_Pop_Gloms[%i].soma"%i)

            self.next_global_id+=1

        h("{ a_Pop_Gloms[0].position(207.28255, 221.71043, 866.2006) }")

        h("proc initialiseV_Pop_Gloms() { for i = 0, n_Pop_Gloms-1 { a_Pop_Gloms[i].set_initial_v() } }")
        h("objref fih_Pop_Gloms")
        h('{fih_Pop_Gloms = new FInitializeHandler(0, "initialiseV_Pop_Gloms()")}')

        h("proc initialiseIons_Pop_Gloms() { for i = 0, n_Pop_Gloms-1 { a_Pop_Gloms[i].set_initial_ion_properties() } }")
        h("objref fih_ion_Pop_Gloms")
        h('{fih_ion_Pop_Gloms = new FInitializeHandler(1, "initialiseIons_Pop_Gloms()")}')

        # ######################   Population: Pop_Mitral_0_0
        print("Population Pop_Mitral_0_0 contains 1 instance(s) of component: Mitral_0_0 of type: cell")

        h.load_file("Mitral_0_0.hoc")
        a_Pop_Mitral_0_0 = []
        h("{ n_Pop_Mitral_0_0 = 1 }")
        h("objectvar a_Pop_Mitral_0_0[n_Pop_Mitral_0_0]")
        for i in range(int(h.n_Pop_Mitral_0_0)):
            h("a_Pop_Mitral_0_0[%i] = new Mitral_0_0()"%i)
            h("access a_Pop_Mitral_0_0[%i].soma"%i)

            self.next_global_id+=1

        h("{ a_Pop_Mitral_0_0[0].position(0.0, 0.0, 0.0) }")

        h("proc initialiseV_Pop_Mitral_0_0() { for i = 0, n_Pop_Mitral_0_0-1 { a_Pop_Mitral_0_0[i].set_initial_v() } }")
        h("objref fih_Pop_Mitral_0_0")
        h('{fih_Pop_Mitral_0_0 = new FInitializeHandler(0, "initialiseV_Pop_Mitral_0_0()")}')

        h("proc initialiseIons_Pop_Mitral_0_0() { for i = 0, n_Pop_Mitral_0_0-1 { a_Pop_Mitral_0_0[i].set_initial_ion_properties() } }")
        h("objref fih_ion_Pop_Mitral_0_0")
        h('{fih_ion_Pop_Mitral_0_0 = new FInitializeHandler(1, "initialiseIons_Pop_Mitral_0_0()")}')

        # ######################   Population: Pop_Granule_0_110821
        print("Population Pop_Granule_0_110821 contains 1 instance(s) of component: Granule_0_110821 of type: cell")

        h.load_file("Granule_0_110821.hoc")
        a_Pop_Granule_0_110821 = []
        h("{ n_Pop_Granule_0_110821 = 1 }")
        h("objectvar a_Pop_Granule_0_110821[n_Pop_Granule_0_110821]")
        for i in range(int(h.n_Pop_Granule_0_110821)):
            h("a_Pop_Granule_0_110821[%i] = new Granule_0_110821()"%i)
            h("access a_Pop_Granule_0_110821[%i].soma"%i)

            self.next_global_id+=1

        h("{ a_Pop_Granule_0_110821[0].position(375.0, 1050.0, 450.0) }")

        h("proc initialiseV_Pop_Granule_0_110821() { for i = 0, n_Pop_Granule_0_110821-1 { a_Pop_Granule_0_110821[i].set_initial_v() } }")
        h("objref fih_Pop_Granule_0_110821")
        h('{fih_Pop_Granule_0_110821 = new FInitializeHandler(0, "initialiseV_Pop_Granule_0_110821()")}')

        h("proc initialiseIons_Pop_Granule_0_110821() { for i = 0, n_Pop_Granule_0_110821-1 { a_Pop_Granule_0_110821[i].set_initial_ion_properties() } }")
        h("objref fih_ion_Pop_Granule_0_110821")
        h('{fih_ion_Pop_Granule_0_110821 = new FInitializeHandler(1, "initialiseIons_Pop_Granule_0_110821()")}')

        # ######################   Projection: Proj_703836162_M2G
        print("Adding projection: Proj_703836162_M2G, from Pop_Mitral_0_0 to Pop_Granule_0_110821 with synapse AmpaNmdaSynapse, 1 connection(s)")

        # Connection 0: cell 0, seg 257 (0.86130357) [0.8300323 on a_Pop_Mitral_0_0[0].secden_8] -> cell 0, seg 4 (0.5) [0.5 on a_Pop_Granule_0_110821[0].head], weight: 1.0, delay 0.0
        h("objectvar syn_Pop_Granule_0_110821_0_4_AmpaNmdaSynapse_0")
        h("a_Pop_Granule_0_110821[0].head syn_Pop_Granule_0_110821_0_4_AmpaNmdaSynapse_0 = new AmpaNmdaSynapse(0.5)")
        h("a_Pop_Mitral_0_0[0].secden_8 a_Pop_Granule_0_110821[0].synlist.append(new NetCon(&v(0.8300323), syn_Pop_Granule_0_110821_0_4_AmpaNmdaSynapse_0, 0.0, 0.0, 1.0))")

        # ######################   Input List: stimInput1
        print("Adding input list: stimInput1 to Pop_Mitral_0_0, with 1 inputs of type synTrain")

        # Adding single input: Component(id=0 type=input)
        # Generating event source for point process Component(id=0 type=input)
        self.synTrain_synInputFastTwo_0 = h.synInputFastTwo(0.024995321, sec=h.a_Pop_Mitral_0_0[0].soma)
        def singleNetStimT(tstim):
        	n=h.NetStim()
        	n.number = 1
        	n.start=tstim
        	return n
        self.synTrain_stims_0 = [singleNetStimT(t) for t in [2.0, 15.0]]
        self.synTrain_netCons_0 = [h.NetCon(s, self.synTrain_synInputFastTwo_0, 0, 0, 1) for s in self.synTrain_stims_0]
        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        h.nrncontrolmenu()


    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        h.run()

        self.sim_end = time.time()
        sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(sim_time, sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        #print("INIT STIM  %s; %s; %s; %s"%(rand, stimType, gid, seed))
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()


        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

#if __name__ == '__main__':

    ns = NeuronSimulation(tstop=3000, dt=0.025, seed=123456789)

    #ns.run()

